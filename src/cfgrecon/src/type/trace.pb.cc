// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace trace_format {

namespace {

const ::google::protobuf::Descriptor* address_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  address_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* header_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  header_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* module_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  module_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* exception_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exception_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* metadata_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  metadata_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* register_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  register_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* memory_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  memory_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* call_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  call_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_open_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_open_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_read_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_read_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_write_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_write_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_generic_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_generic_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* syscall_sup_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syscall_sup_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* syscall_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syscall_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* ins_con_info_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ins_con_info_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* instruction_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  instruction_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* body_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  body_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* chunk_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chunk_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* trace_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trace_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* architecture_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* typeid_address_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* typeid_metadata_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* typeid_syscall_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* typeid_con_info_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* typeid_body_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trace_2eproto() {
  protobuf_AddDesc_trace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trace.proto");
  GOOGLE_CHECK(file != NULL);
  address_t_descriptor_ = file->message_type(0);
  static const int address_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, value_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, value_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, value_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, value_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, value_128_),
  };
  address_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      address_t_descriptor_,
      address_t::default_instance_,
      address_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(address_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(address_t));
  header_t_descriptor_ = file->message_type(1);
  static const int header_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, architecture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, address_size_),
  };
  header_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      header_t_descriptor_,
      header_t::default_instance_,
      header_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(header_t));
  module_t_descriptor_ = file->message_type(2);
  static const int module_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module_t, name_),
  };
  module_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      module_t_descriptor_,
      module_t::default_instance_,
      module_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(module_t));
  exception_t_descriptor_ = file->message_type(3);
  static const int exception_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_t, type_exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_t, handler_),
  };
  exception_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exception_t_descriptor_,
      exception_t::default_instance_,
      exception_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exception_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exception_t));
  metadata_t_descriptor_ = file->message_type(4);
  static const int metadata_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, module_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, exception_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, wave_metadata_),
  };
  metadata_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      metadata_t_descriptor_,
      metadata_t::default_instance_,
      metadata_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(metadata_t));
  register_t_descriptor_ = file->message_type(5);
  static const int register_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, value_),
  };
  register_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      register_t_descriptor_,
      register_t::default_instance_,
      register_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(register_t));
  memory_t_descriptor_ = file->message_type(6);
  static const int memory_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, value_),
  };
  memory_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      memory_t_descriptor_,
      memory_t::default_instance_,
      memory_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memory_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(memory_t));
  call_t_descriptor_ = file->message_type(7);
  static const int call_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(call_t, func_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(call_t, func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(call_t, is_traced_),
  };
  call_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      call_t_descriptor_,
      call_t::default_instance_,
      call_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(call_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(call_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(call_t));
  sys_open_t_descriptor_ = file->message_type(8);
  static const int sys_open_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_open_t, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_open_t, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_open_t, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_open_t, file_descriptor_),
  };
  sys_open_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_open_t_descriptor_,
      sys_open_t::default_instance_,
      sys_open_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_open_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_open_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_open_t));
  sys_read_t_descriptor_ = file->message_type(9);
  static const int sys_read_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_read_t, file_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_read_t, buffer_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_read_t, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_read_t, buffer_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_read_t, count_effective_),
  };
  sys_read_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_read_t_descriptor_,
      sys_read_t::default_instance_,
      sys_read_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_read_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_read_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_read_t));
  sys_write_t_descriptor_ = file->message_type(10);
  static const int sys_write_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_write_t, file_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_write_t, buffer_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_write_t, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_write_t, buffer_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_write_t, count_effective_),
  };
  sys_write_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_write_t_descriptor_,
      sys_write_t::default_instance_,
      sys_write_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_write_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_write_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_write_t));
  sys_generic_t_descriptor_ = file->message_type(11);
  static const int sys_generic_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, address_),
  };
  sys_generic_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_generic_t_descriptor_,
      sys_generic_t::default_instance_,
      sys_generic_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_generic_t));
  syscall_sup_info_t_descriptor_ = file->message_type(12);
  static const int syscall_sup_info_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_sup_info_t, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_sup_info_t, open_syscall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_sup_info_t, read_syscall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_sup_info_t, write_sycall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_sup_info_t, generic_sycall_),
  };
  syscall_sup_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syscall_sup_info_t_descriptor_,
      syscall_sup_info_t::default_instance_,
      syscall_sup_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_sup_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_sup_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syscall_sup_info_t));
  syscall_t_descriptor_ = file->message_type(13);
  static const int syscall_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, info_),
  };
  syscall_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syscall_t_descriptor_,
      syscall_t::default_instance_,
      syscall_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syscall_t));
  ins_con_info_t_descriptor_ = file->message_type(14);
  static const int ins_con_info_t_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, read_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, write_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, load_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, store_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, ret_ret_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, system_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, next_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, reserved_comment_),
  };
  ins_con_info_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ins_con_info_t_descriptor_,
      ins_con_info_t::default_instance_,
      ins_con_info_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ins_con_info_t));
  instruction_t_descriptor_ = file->message_type(15);
  static const int instruction_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, concrete_info_),
  };
  instruction_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      instruction_t_descriptor_,
      instruction_t::default_instance_,
      instruction_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(instruction_t));
  body_t_descriptor_ = file->message_type(16);
  static const int body_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, instruction_),
  };
  body_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      body_t_descriptor_,
      body_t::default_instance_,
      body_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(body_t));
  chunk_t_descriptor_ = file->message_type(17);
  static const int chunk_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, body_),
  };
  chunk_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chunk_t_descriptor_,
      chunk_t::default_instance_,
      chunk_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chunk_t));
  trace_t_descriptor_ = file->message_type(18);
  static const int trace_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, body_),
  };
  trace_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trace_t_descriptor_,
      trace_t::default_instance_,
      trace_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trace_t));
  architecture_t_descriptor_ = file->enum_type(0);
  typeid_address_t_descriptor_ = file->enum_type(1);
  typeid_metadata_t_descriptor_ = file->enum_type(2);
  typeid_syscall_t_descriptor_ = file->enum_type(3);
  typeid_con_info_t_descriptor_ = file->enum_type(4);
  typeid_body_t_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    address_t_descriptor_, &address_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    header_t_descriptor_, &header_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    module_t_descriptor_, &module_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exception_t_descriptor_, &exception_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    metadata_t_descriptor_, &metadata_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    register_t_descriptor_, &register_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    memory_t_descriptor_, &memory_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    call_t_descriptor_, &call_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_open_t_descriptor_, &sys_open_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_read_t_descriptor_, &sys_read_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_write_t_descriptor_, &sys_write_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_generic_t_descriptor_, &sys_generic_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syscall_sup_info_t_descriptor_, &syscall_sup_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syscall_t_descriptor_, &syscall_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ins_con_info_t_descriptor_, &ins_con_info_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    instruction_t_descriptor_, &instruction_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    body_t_descriptor_, &body_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chunk_t_descriptor_, &chunk_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trace_t_descriptor_, &trace_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trace_2eproto() {
  delete address_t::default_instance_;
  delete address_t_reflection_;
  delete header_t::default_instance_;
  delete header_t_reflection_;
  delete module_t::default_instance_;
  delete module_t_reflection_;
  delete exception_t::default_instance_;
  delete exception_t_reflection_;
  delete metadata_t::default_instance_;
  delete metadata_t_reflection_;
  delete register_t::default_instance_;
  delete register_t_reflection_;
  delete memory_t::default_instance_;
  delete memory_t_reflection_;
  delete call_t::default_instance_;
  delete call_t_reflection_;
  delete sys_open_t::default_instance_;
  delete sys_open_t_reflection_;
  delete sys_read_t::default_instance_;
  delete sys_read_t_reflection_;
  delete sys_write_t::default_instance_;
  delete sys_write_t_reflection_;
  delete sys_generic_t::default_instance_;
  delete sys_generic_t_reflection_;
  delete syscall_sup_info_t::default_instance_;
  delete syscall_sup_info_t_reflection_;
  delete syscall_t::default_instance_;
  delete syscall_t_reflection_;
  delete ins_con_info_t::default_instance_;
  delete ins_con_info_t_reflection_;
  delete instruction_t::default_instance_;
  delete instruction_t_reflection_;
  delete body_t::default_instance_;
  delete body_t_reflection_;
  delete chunk_t::default_instance_;
  delete chunk_t_reflection_;
  delete trace_t::default_instance_;
  delete trace_t_reflection_;
}

void protobuf_AddDesc_trace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013trace.proto\022\014trace_format\"\225\001\n\taddress_"
    "t\022.\n\006typeid\030\001 \002(\0162\036.trace_format.typeid_"
    "address_t\022\017\n\007value_8\030\002 \001(\r\022\020\n\010value_16\030\003"
    " \001(\r\022\020\n\010value_32\030\004 \001(\r\022\020\n\010value_64\030\005 \001(\004"
    "\022\021\n\tvalue_128\030\006 \001(\014\"t\n\010header_t\0222\n\014archi"
    "tecture\030\001 \002(\0162\034.trace_format.architectur"
    "e_t\0224\n\014address_size\030\002 \002(\0162\036.trace_format"
    ".typeid_address_t\"\030\n\010module_t\022\014\n\004name\030\001 "
    "\002(\t\"O\n\013exception_t\022\026\n\016type_exception\030\001 \002"
    "(\r\022(\n\007handler\030\002 \002(\0132\027.trace_format.addre"
    "ss_t\"\274\001\n\nmetadata_t\022/\n\006typeid\030\001 \002(\0162\037.tr"
    "ace_format.typeid_metadata_t\022/\n\017module_m"
    "etadata\030\002 \001(\0132\026.trace_format.module_t\0225\n"
    "\022exception_metadata\030\003 \001(\0132\031.trace_format"
    ".exception_t\022\025\n\rwave_metadata\030\004 \001(\r\"B\n\nr"
    "egister_t\022\014\n\004name\030\001 \002(\t\022&\n\005value\030\002 \002(\0132\027"
    ".trace_format.address_t\"\\\n\010memory_t\022(\n\007a"
    "ddress\030\001 \002(\0132\027.trace_format.address_t\022&\n"
    "\005value\030\002 \002(\0132\027.trace_format.address_t\"Z\n"
    "\006call_t\022*\n\tfunc_addr\030\001 \002(\0132\027.trace_forma"
    "t.address_t\022\021\n\tfunc_name\030\002 \002(\t\022\021\n\tis_tra"
    "ced\030\003 \002(\010\"U\n\nsys_open_t\022\021\n\tfile_name\030\001 \002"
    "(\t\022\r\n\005flags\030\002 \002(\021\022\014\n\004mode\030\003 \002(\r\022\027\n\017file_"
    "descriptor\030\004 \002(\005\"\223\001\n\nsys_read_t\022\027\n\017file_"
    "descriptor\030\001 \002(\r\022/\n\016buffer_address\030\002 \002(\013"
    "2\027.trace_format.address_t\022\r\n\005count\030\003 \002(\r"
    "\022\023\n\013buffer_data\030\004 \002(\014\022\027\n\017count_effective"
    "\030\005 \002(\r\"\224\001\n\013sys_write_t\022\027\n\017file_descripto"
    "r\030\001 \002(\r\022/\n\016buffer_address\030\002 \002(\0132\027.trace_"
    "format.address_t\022\r\n\005count\030\003 \002(\r\022\023\n\013buffe"
    "r_data\030\004 \002(\014\022\027\n\017count_effective\030\005 \002(\r\".\n"
    "\rsys_generic_t\022\014\n\004name\030\001 \002(\t\022\017\n\007address\030"
    "\002 \002(\r\"\212\002\n\022syscall_sup_info_t\022.\n\006typeid\030\001"
    " \002(\0162\036.trace_format.typeid_syscall_t\022.\n\014"
    "open_syscall\030\002 \001(\0132\030.trace_format.sys_op"
    "en_t\022.\n\014read_syscall\030\003 \001(\0132\030.trace_forma"
    "t.sys_read_t\022/\n\014write_sycall\030\004 \001(\0132\031.tra"
    "ce_format.sys_write_t\0223\n\016generic_sycall\030"
    "\005 \001(\0132\033.trace_format.sys_generic_t\"G\n\tsy"
    "scall_t\022\n\n\002id\030\001 \002(\r\022.\n\004info\030\002 \001(\0132 .trac"
    "e_format.syscall_sup_info_t\"\312\003\n\016ins_con_"
    "info_t\022/\n\006typeid\030\001 \002(\0162\037.trace_format.ty"
    "peid_con_info_t\022/\n\rread_register\030\002 \001(\0132\030"
    ".trace_format.register_t\0220\n\016write_regist"
    "er\030\003 \001(\0132\030.trace_format.register_t\022+\n\013lo"
    "ad_memory\030\004 \001(\0132\026.trace_format.memory_t\022"
    ",\n\014store_memory\030\005 \001(\0132\026.trace_format.mem"
    "ory_t\022\"\n\004call\030\006 \001(\0132\024.trace_format.call_"
    "t\022.\n\rret_ret_value\030\007 \001(\0132\027.trace_format."
    "address_t\022,\n\013system_call\030\010 \001(\0132\027.trace_f"
    "ormat.syscall_t\022-\n\014next_address\030\t \001(\0132\027."
    "trace_format.address_t\022\030\n\020reserved_comme"
    "nt\030\n \001(\014\"\221\001\n\rinstruction_t\022\021\n\tthread_id\030"
    "\001 \002(\r\022(\n\007address\030\002 \002(\0132\027.trace_format.ad"
    "dress_t\022\016\n\006opcode\030\003 \002(\014\0223\n\rconcrete_info"
    "\030\004 \003(\0132\034.trace_format.ins_con_info_t\"\223\001\n"
    "\006body_t\022+\n\006typeid\030\001 \002(\0162\033.trace_format.t"
    "ypeid_body_t\022*\n\010metadata\030\002 \001(\0132\030.trace_f"
    "ormat.metadata_t\0220\n\013instruction\030\003 \001(\0132\033."
    "trace_format.instruction_t\"-\n\007chunk_t\022\"\n"
    "\004body\030\001 \003(\0132\024.trace_format.body_t\"U\n\007tra"
    "ce_t\022&\n\006header\030\001 \002(\0132\026.trace_format.head"
    "er_t\022\"\n\004body\030\002 \003(\0132\024.trace_format.body_t"
    "*%\n\016architecture_t\022\007\n\003X86\020\000\022\n\n\006X86_64\020\001*"
    "I\n\020typeid_address_t\022\010\n\004BIT8\020\000\022\t\n\005BIT16\020\001"
    "\022\t\n\005BIT32\020\002\022\t\n\005BIT64\020\003\022\n\n\006BIT128\020\004*G\n\021ty"
    "peid_metadata_t\022\022\n\016EXCEPTION_TYPE\020\000\022\017\n\013M"
    "ODULE_TYPE\020\001\022\r\n\tWAVE_TYPE\020\002*^\n\020typeid_sy"
    "scall_t\022\020\n\014OPEN_SYSCALL\020\000\022\020\n\014READ_SYSCAL"
    "L\020\001\022\021\n\rWRITE_SYSCALL\020\002\022\023\n\017GENERIC_SYSCAL"
    "L\020\003*\234\001\n\021typeid_con_info_t\022\013\n\007REGREAD\020\000\022\014"
    "\n\010REGWRITE\020\001\022\013\n\007MEMLOAD\020\002\022\014\n\010MEMSTORE\020\003\022"
    "\010\n\004CALL\020\004\022\007\n\003RET\020\005\022\013\n\007SYSCALL\020\006\022\021\n\rNOT_R"
    "ETRIEVED\020\007\022\020\n\014NEXT_ADDRESS\020\010\022\014\n\007COMMENT\020"
    "\377\001*.\n\rtypeid_body_t\022\014\n\010METADATA\020\000\022\017\n\013INS"
    "TRUCTION\020\001", 3010);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trace.proto", &protobuf_RegisterTypes);
  address_t::default_instance_ = new address_t();
  header_t::default_instance_ = new header_t();
  module_t::default_instance_ = new module_t();
  exception_t::default_instance_ = new exception_t();
  metadata_t::default_instance_ = new metadata_t();
  register_t::default_instance_ = new register_t();
  memory_t::default_instance_ = new memory_t();
  call_t::default_instance_ = new call_t();
  sys_open_t::default_instance_ = new sys_open_t();
  sys_read_t::default_instance_ = new sys_read_t();
  sys_write_t::default_instance_ = new sys_write_t();
  sys_generic_t::default_instance_ = new sys_generic_t();
  syscall_sup_info_t::default_instance_ = new syscall_sup_info_t();
  syscall_t::default_instance_ = new syscall_t();
  ins_con_info_t::default_instance_ = new ins_con_info_t();
  instruction_t::default_instance_ = new instruction_t();
  body_t::default_instance_ = new body_t();
  chunk_t::default_instance_ = new chunk_t();
  trace_t::default_instance_ = new trace_t();
  address_t::default_instance_->InitAsDefaultInstance();
  header_t::default_instance_->InitAsDefaultInstance();
  module_t::default_instance_->InitAsDefaultInstance();
  exception_t::default_instance_->InitAsDefaultInstance();
  metadata_t::default_instance_->InitAsDefaultInstance();
  register_t::default_instance_->InitAsDefaultInstance();
  memory_t::default_instance_->InitAsDefaultInstance();
  call_t::default_instance_->InitAsDefaultInstance();
  sys_open_t::default_instance_->InitAsDefaultInstance();
  sys_read_t::default_instance_->InitAsDefaultInstance();
  sys_write_t::default_instance_->InitAsDefaultInstance();
  sys_generic_t::default_instance_->InitAsDefaultInstance();
  syscall_sup_info_t::default_instance_->InitAsDefaultInstance();
  syscall_t::default_instance_->InitAsDefaultInstance();
  ins_con_info_t::default_instance_->InitAsDefaultInstance();
  instruction_t::default_instance_->InitAsDefaultInstance();
  body_t::default_instance_->InitAsDefaultInstance();
  chunk_t::default_instance_->InitAsDefaultInstance();
  trace_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trace_2eproto {
  StaticDescriptorInitializer_trace_2eproto() {
    protobuf_AddDesc_trace_2eproto();
  }
} static_descriptor_initializer_trace_2eproto_;
const ::google::protobuf::EnumDescriptor* architecture_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return architecture_t_descriptor_;
}
bool architecture_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* typeid_address_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return typeid_address_t_descriptor_;
}
bool typeid_address_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* typeid_metadata_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return typeid_metadata_t_descriptor_;
}
bool typeid_metadata_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* typeid_syscall_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return typeid_syscall_t_descriptor_;
}
bool typeid_syscall_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* typeid_con_info_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return typeid_con_info_t_descriptor_;
}
bool typeid_con_info_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* typeid_body_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return typeid_body_t_descriptor_;
}
bool typeid_body_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int address_t::kTypeidFieldNumber;
const int address_t::kValue8FieldNumber;
const int address_t::kValue16FieldNumber;
const int address_t::kValue32FieldNumber;
const int address_t::kValue64FieldNumber;
const int address_t::kValue128FieldNumber;
#endif  // !_MSC_VER

address_t::address_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void address_t::InitAsDefaultInstance() {
}

address_t::address_t(const address_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void address_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  value_8_ = 0u;
  value_16_ = 0u;
  value_32_ = 0u;
  value_64_ = GOOGLE_ULONGLONG(0);
  value_128_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

address_t::~address_t() {
  SharedDtor();
}

void address_t::SharedDtor() {
  if (value_128_ != &::google::protobuf::internal::kEmptyString) {
    delete value_128_;
  }
  if (this != default_instance_) {
  }
}

void address_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* address_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return address_t_descriptor_;
}

const address_t& address_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

address_t* address_t::default_instance_ = NULL;

address_t* address_t::New() const {
  return new address_t;
}

void address_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0;
    value_8_ = 0u;
    value_16_ = 0u;
    value_32_ = 0u;
    value_64_ = GOOGLE_ULONGLONG(0);
    if (has_value_128()) {
      if (value_128_ != &::google::protobuf::internal::kEmptyString) {
        value_128_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool address_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.typeid_address_t typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::typeid_address_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::typeid_address_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value_8;
        break;
      }

      // optional uint32 value_8 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_8_)));
          set_has_value_8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value_16;
        break;
      }

      // optional uint32 value_16 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_16_)));
          set_has_value_16();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value_32;
        break;
      }

      // optional uint32 value_32 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_32_)));
          set_has_value_32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value_64;
        break;
      }

      // optional uint64 value_64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_64_)));
          set_has_value_64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value_128;
        break;
      }

      // optional bytes value_128 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_128:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_128()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void address_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.typeid_address_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  // optional uint32 value_8 = 2;
  if (has_value_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value_8(), output);
  }

  // optional uint32 value_16 = 3;
  if (has_value_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value_16(), output);
  }

  // optional uint32 value_32 = 4;
  if (has_value_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value_32(), output);
  }

  // optional uint64 value_64 = 5;
  if (has_value_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->value_64(), output);
  }

  // optional bytes value_128 = 6;
  if (has_value_128()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->value_128(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* address_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.typeid_address_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  // optional uint32 value_8 = 2;
  if (has_value_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value_8(), target);
  }

  // optional uint32 value_16 = 3;
  if (has_value_16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value_16(), target);
  }

  // optional uint32 value_32 = 4;
  if (has_value_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value_32(), target);
  }

  // optional uint64 value_64 = 5;
  if (has_value_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->value_64(), target);
  }

  // optional bytes value_128 = 6;
  if (has_value_128()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->value_128(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int address_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.typeid_address_t typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
    }

    // optional uint32 value_8 = 2;
    if (has_value_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_8());
    }

    // optional uint32 value_16 = 3;
    if (has_value_16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_16());
    }

    // optional uint32 value_32 = 4;
    if (has_value_32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_32());
    }

    // optional uint64 value_64 = 5;
    if (has_value_64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value_64());
    }

    // optional bytes value_128 = 6;
    if (has_value_128()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_128());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void address_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const address_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const address_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void address_t::MergeFrom(const address_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_value_8()) {
      set_value_8(from.value_8());
    }
    if (from.has_value_16()) {
      set_value_16(from.value_16());
    }
    if (from.has_value_32()) {
      set_value_32(from.value_32());
    }
    if (from.has_value_64()) {
      set_value_64(from.value_64());
    }
    if (from.has_value_128()) {
      set_value_128(from.value_128());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void address_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void address_t::CopyFrom(const address_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool address_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void address_t::Swap(address_t* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(value_8_, other->value_8_);
    std::swap(value_16_, other->value_16_);
    std::swap(value_32_, other->value_32_);
    std::swap(value_64_, other->value_64_);
    std::swap(value_128_, other->value_128_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata address_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = address_t_descriptor_;
  metadata.reflection = address_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int header_t::kArchitectureFieldNumber;
const int header_t::kAddressSizeFieldNumber;
#endif  // !_MSC_VER

header_t::header_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void header_t::InitAsDefaultInstance() {
}

header_t::header_t(const header_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void header_t::SharedCtor() {
  _cached_size_ = 0;
  architecture_ = 0;
  address_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

header_t::~header_t() {
  SharedDtor();
}

void header_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void header_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* header_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return header_t_descriptor_;
}

const header_t& header_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

header_t* header_t::default_instance_ = NULL;

header_t* header_t::New() const {
  return new header_t;
}

void header_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    architecture_ = 0;
    address_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool header_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.architecture_t architecture = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::architecture_t_IsValid(value)) {
            set_architecture(static_cast< ::trace_format::architecture_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address_size;
        break;
      }

      // required .trace_format.typeid_address_t address_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::typeid_address_t_IsValid(value)) {
            set_address_size(static_cast< ::trace_format::typeid_address_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void header_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.architecture_t architecture = 1;
  if (has_architecture()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->architecture(), output);
  }

  // required .trace_format.typeid_address_t address_size = 2;
  if (has_address_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->address_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* header_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.architecture_t architecture = 1;
  if (has_architecture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->architecture(), target);
  }

  // required .trace_format.typeid_address_t address_size = 2;
  if (has_address_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->address_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int header_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.architecture_t architecture = 1;
    if (has_architecture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->architecture());
    }

    // required .trace_format.typeid_address_t address_size = 2;
    if (has_address_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const header_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const header_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void header_t::MergeFrom(const header_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_architecture()) {
      set_architecture(from.architecture());
    }
    if (from.has_address_size()) {
      set_address_size(from.address_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void header_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void header_t::CopyFrom(const header_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void header_t::Swap(header_t* other) {
  if (other != this) {
    std::swap(architecture_, other->architecture_);
    std::swap(address_size_, other->address_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata header_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = header_t_descriptor_;
  metadata.reflection = header_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int module_t::kNameFieldNumber;
#endif  // !_MSC_VER

module_t::module_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void module_t::InitAsDefaultInstance() {
}

module_t::module_t(const module_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void module_t::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

module_t::~module_t() {
  SharedDtor();
}

void module_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void module_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* module_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return module_t_descriptor_;
}

const module_t& module_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

module_t* module_t::default_instance_ = NULL;

module_t* module_t::New() const {
  return new module_t;
}

void module_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool module_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void module_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* module_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int module_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void module_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const module_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const module_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void module_t::MergeFrom(const module_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void module_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void module_t::CopyFrom(const module_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool module_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void module_t::Swap(module_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata module_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = module_t_descriptor_;
  metadata.reflection = module_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exception_t::kTypeExceptionFieldNumber;
const int exception_t::kHandlerFieldNumber;
#endif  // !_MSC_VER

exception_t::exception_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exception_t::InitAsDefaultInstance() {
  handler_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

exception_t::exception_t(const exception_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exception_t::SharedCtor() {
  _cached_size_ = 0;
  type_exception_ = 0u;
  handler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exception_t::~exception_t() {
  SharedDtor();
}

void exception_t::SharedDtor() {
  if (this != default_instance_) {
    delete handler_;
  }
}

void exception_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exception_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exception_t_descriptor_;
}

const exception_t& exception_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

exception_t* exception_t::default_instance_ = NULL;

exception_t* exception_t::New() const {
  return new exception_t;
}

void exception_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_exception_ = 0u;
    if (has_handler()) {
      if (handler_ != NULL) handler_->::trace_format::address_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exception_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type_exception = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_exception_)));
          set_has_type_exception();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_handler;
        break;
      }

      // required .trace_format.address_t handler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exception_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type_exception = 1;
  if (has_type_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type_exception(), output);
  }

  // required .trace_format.address_t handler = 2;
  if (has_handler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->handler(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exception_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type_exception = 1;
  if (has_type_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type_exception(), target);
  }

  // required .trace_format.address_t handler = 2;
  if (has_handler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->handler(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exception_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type_exception = 1;
    if (has_type_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_exception());
    }

    // required .trace_format.address_t handler = 2;
    if (has_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handler());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exception_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exception_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exception_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exception_t::MergeFrom(const exception_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_exception()) {
      set_type_exception(from.type_exception());
    }
    if (from.has_handler()) {
      mutable_handler()->::trace_format::address_t::MergeFrom(from.handler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exception_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exception_t::CopyFrom(const exception_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exception_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_handler()) {
    if (!this->handler().IsInitialized()) return false;
  }
  return true;
}

void exception_t::Swap(exception_t* other) {
  if (other != this) {
    std::swap(type_exception_, other->type_exception_);
    std::swap(handler_, other->handler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exception_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exception_t_descriptor_;
  metadata.reflection = exception_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int metadata_t::kTypeidFieldNumber;
const int metadata_t::kModuleMetadataFieldNumber;
const int metadata_t::kExceptionMetadataFieldNumber;
const int metadata_t::kWaveMetadataFieldNumber;
#endif  // !_MSC_VER

metadata_t::metadata_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void metadata_t::InitAsDefaultInstance() {
  module_metadata_ = const_cast< ::trace_format::module_t*>(&::trace_format::module_t::default_instance());
  exception_metadata_ = const_cast< ::trace_format::exception_t*>(&::trace_format::exception_t::default_instance());
}

metadata_t::metadata_t(const metadata_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void metadata_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  module_metadata_ = NULL;
  exception_metadata_ = NULL;
  wave_metadata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

metadata_t::~metadata_t() {
  SharedDtor();
}

void metadata_t::SharedDtor() {
  if (this != default_instance_) {
    delete module_metadata_;
    delete exception_metadata_;
  }
}

void metadata_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* metadata_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return metadata_t_descriptor_;
}

const metadata_t& metadata_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

metadata_t* metadata_t::default_instance_ = NULL;

metadata_t* metadata_t::New() const {
  return new metadata_t;
}

void metadata_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0;
    if (has_module_metadata()) {
      if (module_metadata_ != NULL) module_metadata_->::trace_format::module_t::Clear();
    }
    if (has_exception_metadata()) {
      if (exception_metadata_ != NULL) exception_metadata_->::trace_format::exception_t::Clear();
    }
    wave_metadata_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool metadata_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.typeid_metadata_t typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::typeid_metadata_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::typeid_metadata_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_module_metadata;
        break;
      }

      // optional .trace_format.module_t module_metadata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exception_metadata;
        break;
      }

      // optional .trace_format.exception_t exception_metadata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wave_metadata;
        break;
      }

      // optional uint32 wave_metadata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave_metadata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_metadata_)));
          set_has_wave_metadata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void metadata_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.typeid_metadata_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  // optional .trace_format.module_t module_metadata = 2;
  if (has_module_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->module_metadata(), output);
  }

  // optional .trace_format.exception_t exception_metadata = 3;
  if (has_exception_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exception_metadata(), output);
  }

  // optional uint32 wave_metadata = 4;
  if (has_wave_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wave_metadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* metadata_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.typeid_metadata_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  // optional .trace_format.module_t module_metadata = 2;
  if (has_module_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->module_metadata(), target);
  }

  // optional .trace_format.exception_t exception_metadata = 3;
  if (has_exception_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exception_metadata(), target);
  }

  // optional uint32 wave_metadata = 4;
  if (has_wave_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wave_metadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int metadata_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.typeid_metadata_t typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
    }

    // optional .trace_format.module_t module_metadata = 2;
    if (has_module_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module_metadata());
    }

    // optional .trace_format.exception_t exception_metadata = 3;
    if (has_exception_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception_metadata());
    }

    // optional uint32 wave_metadata = 4;
    if (has_wave_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave_metadata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void metadata_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const metadata_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const metadata_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void metadata_t::MergeFrom(const metadata_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_module_metadata()) {
      mutable_module_metadata()->::trace_format::module_t::MergeFrom(from.module_metadata());
    }
    if (from.has_exception_metadata()) {
      mutable_exception_metadata()->::trace_format::exception_t::MergeFrom(from.exception_metadata());
    }
    if (from.has_wave_metadata()) {
      set_wave_metadata(from.wave_metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void metadata_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metadata_t::CopyFrom(const metadata_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metadata_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_module_metadata()) {
    if (!this->module_metadata().IsInitialized()) return false;
  }
  if (has_exception_metadata()) {
    if (!this->exception_metadata().IsInitialized()) return false;
  }
  return true;
}

void metadata_t::Swap(metadata_t* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(module_metadata_, other->module_metadata_);
    std::swap(exception_metadata_, other->exception_metadata_);
    std::swap(wave_metadata_, other->wave_metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata metadata_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = metadata_t_descriptor_;
  metadata.reflection = metadata_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int register_t::kNameFieldNumber;
const int register_t::kValueFieldNumber;
#endif  // !_MSC_VER

register_t::register_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void register_t::InitAsDefaultInstance() {
  value_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

register_t::register_t(const register_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void register_t::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

register_t::~register_t() {
  SharedDtor();
}

void register_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void register_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return register_t_descriptor_;
}

const register_t& register_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

register_t* register_t::default_instance_ = NULL;

register_t* register_t::New() const {
  return new register_t;
}

void register_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::trace_format::address_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool register_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .trace_format.address_t value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void register_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .trace_format.address_t value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* register_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .trace_format.address_t value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int register_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .trace_format.address_t value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const register_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const register_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void register_t::MergeFrom(const register_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      mutable_value()->::trace_format::address_t::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void register_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_t::CopyFrom(const register_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void register_t::Swap(register_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata register_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = register_t_descriptor_;
  metadata.reflection = register_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int memory_t::kAddressFieldNumber;
const int memory_t::kValueFieldNumber;
#endif  // !_MSC_VER

memory_t::memory_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void memory_t::InitAsDefaultInstance() {
  address_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
  value_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

memory_t::memory_t(const memory_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void memory_t::SharedCtor() {
  _cached_size_ = 0;
  address_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

memory_t::~memory_t() {
  SharedDtor();
}

void memory_t::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
    delete value_;
  }
}

void memory_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memory_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return memory_t_descriptor_;
}

const memory_t& memory_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

memory_t* memory_t::default_instance_ = NULL;

memory_t* memory_t::New() const {
  return new memory_t;
}

void memory_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != NULL) address_->::trace_format::address_t::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::trace_format::address_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool memory_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.address_t address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .trace_format.address_t value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void memory_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.address_t address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->address(), output);
  }

  // required .trace_format.address_t value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* memory_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.address_t address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->address(), target);
  }

  // required .trace_format.address_t value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int memory_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.address_t address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // required .trace_format.address_t value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memory_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const memory_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const memory_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void memory_t::MergeFrom(const memory_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      mutable_address()->::trace_format::address_t::MergeFrom(from.address());
    }
    if (from.has_value()) {
      mutable_value()->::trace_format::address_t::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void memory_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memory_t::CopyFrom(const memory_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memory_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void memory_t::Swap(memory_t* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata memory_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = memory_t_descriptor_;
  metadata.reflection = memory_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int call_t::kFuncAddrFieldNumber;
const int call_t::kFuncNameFieldNumber;
const int call_t::kIsTracedFieldNumber;
#endif  // !_MSC_VER

call_t::call_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void call_t::InitAsDefaultInstance() {
  func_addr_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

call_t::call_t(const call_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void call_t::SharedCtor() {
  _cached_size_ = 0;
  func_addr_ = NULL;
  func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_traced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

call_t::~call_t() {
  SharedDtor();
}

void call_t::SharedDtor() {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    delete func_name_;
  }
  if (this != default_instance_) {
    delete func_addr_;
  }
}

void call_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* call_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return call_t_descriptor_;
}

const call_t& call_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

call_t* call_t::default_instance_ = NULL;

call_t* call_t::New() const {
  return new call_t;
}

void call_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_func_addr()) {
      if (func_addr_ != NULL) func_addr_->::trace_format::address_t::Clear();
    }
    if (has_func_name()) {
      if (func_name_ != &::google::protobuf::internal::kEmptyString) {
        func_name_->clear();
      }
    }
    is_traced_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool call_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.address_t func_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_func_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_func_name;
        break;
      }

      // required string func_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->func_name().data(), this->func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_traced;
        break;
      }

      // required bool is_traced = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_traced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_traced_)));
          set_has_is_traced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void call_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.address_t func_addr = 1;
  if (has_func_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->func_addr(), output);
  }

  // required string func_name = 2;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->func_name(), output);
  }

  // required bool is_traced = 3;
  if (has_is_traced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_traced(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* call_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.address_t func_addr = 1;
  if (has_func_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->func_addr(), target);
  }

  // required string func_name = 2;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->func_name(), target);
  }

  // required bool is_traced = 3;
  if (has_is_traced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_traced(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int call_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.address_t func_addr = 1;
    if (has_func_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->func_addr());
    }

    // required string func_name = 2;
    if (has_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->func_name());
    }

    // required bool is_traced = 3;
    if (has_is_traced()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void call_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const call_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const call_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void call_t::MergeFrom(const call_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func_addr()) {
      mutable_func_addr()->::trace_format::address_t::MergeFrom(from.func_addr());
    }
    if (from.has_func_name()) {
      set_func_name(from.func_name());
    }
    if (from.has_is_traced()) {
      set_is_traced(from.is_traced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void call_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void call_t::CopyFrom(const call_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_func_addr()) {
    if (!this->func_addr().IsInitialized()) return false;
  }
  return true;
}

void call_t::Swap(call_t* other) {
  if (other != this) {
    std::swap(func_addr_, other->func_addr_);
    std::swap(func_name_, other->func_name_);
    std::swap(is_traced_, other->is_traced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata call_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = call_t_descriptor_;
  metadata.reflection = call_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sys_open_t::kFileNameFieldNumber;
const int sys_open_t::kFlagsFieldNumber;
const int sys_open_t::kModeFieldNumber;
const int sys_open_t::kFileDescriptorFieldNumber;
#endif  // !_MSC_VER

sys_open_t::sys_open_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sys_open_t::InitAsDefaultInstance() {
}

sys_open_t::sys_open_t(const sys_open_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sys_open_t::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0;
  mode_ = 0u;
  file_descriptor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_open_t::~sys_open_t() {
  SharedDtor();
}

void sys_open_t::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void sys_open_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_open_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_open_t_descriptor_;
}

const sys_open_t& sys_open_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

sys_open_t* sys_open_t::default_instance_ = NULL;

sys_open_t* sys_open_t::New() const {
  return new sys_open_t;
}

void sys_open_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    flags_ = 0;
    mode_ = 0u;
    file_descriptor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_open_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required sint32 flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required uint32 mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_file_descriptor;
        break;
      }

      // required int32 file_descriptor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_descriptor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_descriptor_)));
          set_has_file_descriptor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sys_open_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }

  // required sint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->flags(), output);
  }

  // required uint32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mode(), output);
  }

  // required int32 file_descriptor = 4;
  if (has_file_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->file_descriptor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sys_open_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // required sint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->flags(), target);
  }

  // required uint32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mode(), target);
  }

  // required int32 file_descriptor = 4;
  if (has_file_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->file_descriptor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sys_open_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required sint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flags());
    }

    // required uint32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // required int32 file_descriptor = 4;
    if (has_file_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_descriptor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_open_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_open_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_open_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_open_t::MergeFrom(const sys_open_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_file_descriptor()) {
      set_file_descriptor(from.file_descriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_open_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_open_t::CopyFrom(const sys_open_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_open_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void sys_open_t::Swap(sys_open_t* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(flags_, other->flags_);
    std::swap(mode_, other->mode_);
    std::swap(file_descriptor_, other->file_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_open_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_open_t_descriptor_;
  metadata.reflection = sys_open_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sys_read_t::kFileDescriptorFieldNumber;
const int sys_read_t::kBufferAddressFieldNumber;
const int sys_read_t::kCountFieldNumber;
const int sys_read_t::kBufferDataFieldNumber;
const int sys_read_t::kCountEffectiveFieldNumber;
#endif  // !_MSC_VER

sys_read_t::sys_read_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sys_read_t::InitAsDefaultInstance() {
  buffer_address_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

sys_read_t::sys_read_t(const sys_read_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sys_read_t::SharedCtor() {
  _cached_size_ = 0;
  file_descriptor_ = 0u;
  buffer_address_ = NULL;
  count_ = 0u;
  buffer_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_effective_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_read_t::~sys_read_t() {
  SharedDtor();
}

void sys_read_t::SharedDtor() {
  if (buffer_data_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_data_;
  }
  if (this != default_instance_) {
    delete buffer_address_;
  }
}

void sys_read_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_read_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_read_t_descriptor_;
}

const sys_read_t& sys_read_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

sys_read_t* sys_read_t::default_instance_ = NULL;

sys_read_t* sys_read_t::New() const {
  return new sys_read_t;
}

void sys_read_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_descriptor_ = 0u;
    if (has_buffer_address()) {
      if (buffer_address_ != NULL) buffer_address_->::trace_format::address_t::Clear();
    }
    count_ = 0u;
    if (has_buffer_data()) {
      if (buffer_data_ != &::google::protobuf::internal::kEmptyString) {
        buffer_data_->clear();
      }
    }
    count_effective_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_read_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 file_descriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_descriptor_)));
          set_has_file_descriptor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buffer_address;
        break;
      }

      // required .trace_format.address_t buffer_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffer_data;
        break;
      }

      // required bytes buffer_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_effective;
        break;
      }

      // required uint32 count_effective = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_effective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_effective_)));
          set_has_count_effective();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sys_read_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_descriptor(), output);
  }

  // required .trace_format.address_t buffer_address = 2;
  if (has_buffer_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buffer_address(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->buffer_data(), output);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_effective(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sys_read_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_descriptor(), target);
  }

  // required .trace_format.address_t buffer_address = 2;
  if (has_buffer_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buffer_address(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer_data(), target);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_effective(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sys_read_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 file_descriptor = 1;
    if (has_file_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_descriptor());
    }

    // required .trace_format.address_t buffer_address = 2;
    if (has_buffer_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffer_address());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required bytes buffer_data = 4;
    if (has_buffer_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer_data());
    }

    // required uint32 count_effective = 5;
    if (has_count_effective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_effective());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_read_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_read_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_read_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_read_t::MergeFrom(const sys_read_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_descriptor()) {
      set_file_descriptor(from.file_descriptor());
    }
    if (from.has_buffer_address()) {
      mutable_buffer_address()->::trace_format::address_t::MergeFrom(from.buffer_address());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_buffer_data()) {
      set_buffer_data(from.buffer_data());
    }
    if (from.has_count_effective()) {
      set_count_effective(from.count_effective());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_read_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_read_t::CopyFrom(const sys_read_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_read_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_buffer_address()) {
    if (!this->buffer_address().IsInitialized()) return false;
  }
  return true;
}

void sys_read_t::Swap(sys_read_t* other) {
  if (other != this) {
    std::swap(file_descriptor_, other->file_descriptor_);
    std::swap(buffer_address_, other->buffer_address_);
    std::swap(count_, other->count_);
    std::swap(buffer_data_, other->buffer_data_);
    std::swap(count_effective_, other->count_effective_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_read_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_read_t_descriptor_;
  metadata.reflection = sys_read_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sys_write_t::kFileDescriptorFieldNumber;
const int sys_write_t::kBufferAddressFieldNumber;
const int sys_write_t::kCountFieldNumber;
const int sys_write_t::kBufferDataFieldNumber;
const int sys_write_t::kCountEffectiveFieldNumber;
#endif  // !_MSC_VER

sys_write_t::sys_write_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sys_write_t::InitAsDefaultInstance() {
  buffer_address_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

sys_write_t::sys_write_t(const sys_write_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sys_write_t::SharedCtor() {
  _cached_size_ = 0;
  file_descriptor_ = 0u;
  buffer_address_ = NULL;
  count_ = 0u;
  buffer_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_effective_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_write_t::~sys_write_t() {
  SharedDtor();
}

void sys_write_t::SharedDtor() {
  if (buffer_data_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_data_;
  }
  if (this != default_instance_) {
    delete buffer_address_;
  }
}

void sys_write_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_write_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_write_t_descriptor_;
}

const sys_write_t& sys_write_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

sys_write_t* sys_write_t::default_instance_ = NULL;

sys_write_t* sys_write_t::New() const {
  return new sys_write_t;
}

void sys_write_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_descriptor_ = 0u;
    if (has_buffer_address()) {
      if (buffer_address_ != NULL) buffer_address_->::trace_format::address_t::Clear();
    }
    count_ = 0u;
    if (has_buffer_data()) {
      if (buffer_data_ != &::google::protobuf::internal::kEmptyString) {
        buffer_data_->clear();
      }
    }
    count_effective_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_write_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 file_descriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_descriptor_)));
          set_has_file_descriptor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buffer_address;
        break;
      }

      // required .trace_format.address_t buffer_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffer_data;
        break;
      }

      // required bytes buffer_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_effective;
        break;
      }

      // required uint32 count_effective = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_effective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_effective_)));
          set_has_count_effective();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sys_write_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_descriptor(), output);
  }

  // required .trace_format.address_t buffer_address = 2;
  if (has_buffer_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buffer_address(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->buffer_data(), output);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_effective(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sys_write_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_descriptor(), target);
  }

  // required .trace_format.address_t buffer_address = 2;
  if (has_buffer_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buffer_address(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer_data(), target);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_effective(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sys_write_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 file_descriptor = 1;
    if (has_file_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_descriptor());
    }

    // required .trace_format.address_t buffer_address = 2;
    if (has_buffer_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffer_address());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required bytes buffer_data = 4;
    if (has_buffer_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer_data());
    }

    // required uint32 count_effective = 5;
    if (has_count_effective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_effective());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_write_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_write_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_write_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_write_t::MergeFrom(const sys_write_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_descriptor()) {
      set_file_descriptor(from.file_descriptor());
    }
    if (from.has_buffer_address()) {
      mutable_buffer_address()->::trace_format::address_t::MergeFrom(from.buffer_address());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_buffer_data()) {
      set_buffer_data(from.buffer_data());
    }
    if (from.has_count_effective()) {
      set_count_effective(from.count_effective());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_write_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_write_t::CopyFrom(const sys_write_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_write_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_buffer_address()) {
    if (!this->buffer_address().IsInitialized()) return false;
  }
  return true;
}

void sys_write_t::Swap(sys_write_t* other) {
  if (other != this) {
    std::swap(file_descriptor_, other->file_descriptor_);
    std::swap(buffer_address_, other->buffer_address_);
    std::swap(count_, other->count_);
    std::swap(buffer_data_, other->buffer_data_);
    std::swap(count_effective_, other->count_effective_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_write_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_write_t_descriptor_;
  metadata.reflection = sys_write_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sys_generic_t::kNameFieldNumber;
const int sys_generic_t::kAddressFieldNumber;
#endif  // !_MSC_VER

sys_generic_t::sys_generic_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sys_generic_t::InitAsDefaultInstance() {
}

sys_generic_t::sys_generic_t(const sys_generic_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sys_generic_t::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_generic_t::~sys_generic_t() {
  SharedDtor();
}

void sys_generic_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void sys_generic_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_generic_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_generic_t_descriptor_;
}

const sys_generic_t& sys_generic_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

sys_generic_t* sys_generic_t::default_instance_ = NULL;

sys_generic_t* sys_generic_t::New() const {
  return new sys_generic_t;
}

void sys_generic_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    address_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_generic_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address;
        break;
      }

      // required uint32 address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sys_generic_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sys_generic_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sys_generic_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_generic_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_generic_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_generic_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_generic_t::MergeFrom(const sys_generic_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_generic_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_generic_t::CopyFrom(const sys_generic_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_generic_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sys_generic_t::Swap(sys_generic_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_generic_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_generic_t_descriptor_;
  metadata.reflection = sys_generic_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syscall_sup_info_t::kTypeidFieldNumber;
const int syscall_sup_info_t::kOpenSyscallFieldNumber;
const int syscall_sup_info_t::kReadSyscallFieldNumber;
const int syscall_sup_info_t::kWriteSycallFieldNumber;
const int syscall_sup_info_t::kGenericSycallFieldNumber;
#endif  // !_MSC_VER

syscall_sup_info_t::syscall_sup_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syscall_sup_info_t::InitAsDefaultInstance() {
  open_syscall_ = const_cast< ::trace_format::sys_open_t*>(&::trace_format::sys_open_t::default_instance());
  read_syscall_ = const_cast< ::trace_format::sys_read_t*>(&::trace_format::sys_read_t::default_instance());
  write_sycall_ = const_cast< ::trace_format::sys_write_t*>(&::trace_format::sys_write_t::default_instance());
  generic_sycall_ = const_cast< ::trace_format::sys_generic_t*>(&::trace_format::sys_generic_t::default_instance());
}

syscall_sup_info_t::syscall_sup_info_t(const syscall_sup_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syscall_sup_info_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  open_syscall_ = NULL;
  read_syscall_ = NULL;
  write_sycall_ = NULL;
  generic_sycall_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syscall_sup_info_t::~syscall_sup_info_t() {
  SharedDtor();
}

void syscall_sup_info_t::SharedDtor() {
  if (this != default_instance_) {
    delete open_syscall_;
    delete read_syscall_;
    delete write_sycall_;
    delete generic_sycall_;
  }
}

void syscall_sup_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syscall_sup_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syscall_sup_info_t_descriptor_;
}

const syscall_sup_info_t& syscall_sup_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

syscall_sup_info_t* syscall_sup_info_t::default_instance_ = NULL;

syscall_sup_info_t* syscall_sup_info_t::New() const {
  return new syscall_sup_info_t;
}

void syscall_sup_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0;
    if (has_open_syscall()) {
      if (open_syscall_ != NULL) open_syscall_->::trace_format::sys_open_t::Clear();
    }
    if (has_read_syscall()) {
      if (read_syscall_ != NULL) read_syscall_->::trace_format::sys_read_t::Clear();
    }
    if (has_write_sycall()) {
      if (write_sycall_ != NULL) write_sycall_->::trace_format::sys_write_t::Clear();
    }
    if (has_generic_sycall()) {
      if (generic_sycall_ != NULL) generic_sycall_->::trace_format::sys_generic_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syscall_sup_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.typeid_syscall_t typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::typeid_syscall_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::typeid_syscall_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_open_syscall;
        break;
      }

      // optional .trace_format.sys_open_t open_syscall = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_syscall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_syscall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_read_syscall;
        break;
      }

      // optional .trace_format.sys_read_t read_syscall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_syscall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_syscall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_write_sycall;
        break;
      }

      // optional .trace_format.sys_write_t write_sycall = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_write_sycall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_sycall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_generic_sycall;
        break;
      }

      // optional .trace_format.sys_generic_t generic_sycall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generic_sycall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_sycall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syscall_sup_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.typeid_syscall_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  // optional .trace_format.sys_open_t open_syscall = 2;
  if (has_open_syscall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_syscall(), output);
  }

  // optional .trace_format.sys_read_t read_syscall = 3;
  if (has_read_syscall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->read_syscall(), output);
  }

  // optional .trace_format.sys_write_t write_sycall = 4;
  if (has_write_sycall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->write_sycall(), output);
  }

  // optional .trace_format.sys_generic_t generic_sycall = 5;
  if (has_generic_sycall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->generic_sycall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syscall_sup_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.typeid_syscall_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  // optional .trace_format.sys_open_t open_syscall = 2;
  if (has_open_syscall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_syscall(), target);
  }

  // optional .trace_format.sys_read_t read_syscall = 3;
  if (has_read_syscall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->read_syscall(), target);
  }

  // optional .trace_format.sys_write_t write_sycall = 4;
  if (has_write_sycall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->write_sycall(), target);
  }

  // optional .trace_format.sys_generic_t generic_sycall = 5;
  if (has_generic_sycall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->generic_sycall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syscall_sup_info_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.typeid_syscall_t typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
    }

    // optional .trace_format.sys_open_t open_syscall = 2;
    if (has_open_syscall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_syscall());
    }

    // optional .trace_format.sys_read_t read_syscall = 3;
    if (has_read_syscall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_syscall());
    }

    // optional .trace_format.sys_write_t write_sycall = 4;
    if (has_write_sycall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write_sycall());
    }

    // optional .trace_format.sys_generic_t generic_sycall = 5;
    if (has_generic_sycall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generic_sycall());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syscall_sup_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syscall_sup_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syscall_sup_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syscall_sup_info_t::MergeFrom(const syscall_sup_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_open_syscall()) {
      mutable_open_syscall()->::trace_format::sys_open_t::MergeFrom(from.open_syscall());
    }
    if (from.has_read_syscall()) {
      mutable_read_syscall()->::trace_format::sys_read_t::MergeFrom(from.read_syscall());
    }
    if (from.has_write_sycall()) {
      mutable_write_sycall()->::trace_format::sys_write_t::MergeFrom(from.write_sycall());
    }
    if (from.has_generic_sycall()) {
      mutable_generic_sycall()->::trace_format::sys_generic_t::MergeFrom(from.generic_sycall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syscall_sup_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_sup_info_t::CopyFrom(const syscall_sup_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_sup_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_open_syscall()) {
    if (!this->open_syscall().IsInitialized()) return false;
  }
  if (has_read_syscall()) {
    if (!this->read_syscall().IsInitialized()) return false;
  }
  if (has_write_sycall()) {
    if (!this->write_sycall().IsInitialized()) return false;
  }
  if (has_generic_sycall()) {
    if (!this->generic_sycall().IsInitialized()) return false;
  }
  return true;
}

void syscall_sup_info_t::Swap(syscall_sup_info_t* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(open_syscall_, other->open_syscall_);
    std::swap(read_syscall_, other->read_syscall_);
    std::swap(write_sycall_, other->write_sycall_);
    std::swap(generic_sycall_, other->generic_sycall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syscall_sup_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syscall_sup_info_t_descriptor_;
  metadata.reflection = syscall_sup_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syscall_t::kIdFieldNumber;
const int syscall_t::kInfoFieldNumber;
#endif  // !_MSC_VER

syscall_t::syscall_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syscall_t::InitAsDefaultInstance() {
  info_ = const_cast< ::trace_format::syscall_sup_info_t*>(&::trace_format::syscall_sup_info_t::default_instance());
}

syscall_t::syscall_t(const syscall_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syscall_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syscall_t::~syscall_t() {
  SharedDtor();
}

void syscall_t::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void syscall_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syscall_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syscall_t_descriptor_;
}

const syscall_t& syscall_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

syscall_t* syscall_t::default_instance_ = NULL;

syscall_t* syscall_t::New() const {
  return new syscall_t;
}

void syscall_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::trace_format::syscall_sup_info_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syscall_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .trace_format.syscall_sup_info_t info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syscall_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .trace_format.syscall_sup_info_t info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syscall_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .trace_format.syscall_sup_info_t info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syscall_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .trace_format.syscall_sup_info_t info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syscall_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syscall_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syscall_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syscall_t::MergeFrom(const syscall_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::trace_format::syscall_sup_info_t::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syscall_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_t::CopyFrom(const syscall_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void syscall_t::Swap(syscall_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syscall_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syscall_t_descriptor_;
  metadata.reflection = syscall_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ins_con_info_t::kTypeidFieldNumber;
const int ins_con_info_t::kReadRegisterFieldNumber;
const int ins_con_info_t::kWriteRegisterFieldNumber;
const int ins_con_info_t::kLoadMemoryFieldNumber;
const int ins_con_info_t::kStoreMemoryFieldNumber;
const int ins_con_info_t::kCallFieldNumber;
const int ins_con_info_t::kRetRetValueFieldNumber;
const int ins_con_info_t::kSystemCallFieldNumber;
const int ins_con_info_t::kNextAddressFieldNumber;
const int ins_con_info_t::kReservedCommentFieldNumber;
#endif  // !_MSC_VER

ins_con_info_t::ins_con_info_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ins_con_info_t::InitAsDefaultInstance() {
  read_register_ = const_cast< ::trace_format::register_t*>(&::trace_format::register_t::default_instance());
  write_register_ = const_cast< ::trace_format::register_t*>(&::trace_format::register_t::default_instance());
  load_memory_ = const_cast< ::trace_format::memory_t*>(&::trace_format::memory_t::default_instance());
  store_memory_ = const_cast< ::trace_format::memory_t*>(&::trace_format::memory_t::default_instance());
  call_ = const_cast< ::trace_format::call_t*>(&::trace_format::call_t::default_instance());
  ret_ret_value_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
  system_call_ = const_cast< ::trace_format::syscall_t*>(&::trace_format::syscall_t::default_instance());
  next_address_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

ins_con_info_t::ins_con_info_t(const ins_con_info_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ins_con_info_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  read_register_ = NULL;
  write_register_ = NULL;
  load_memory_ = NULL;
  store_memory_ = NULL;
  call_ = NULL;
  ret_ret_value_ = NULL;
  system_call_ = NULL;
  next_address_ = NULL;
  reserved_comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ins_con_info_t::~ins_con_info_t() {
  SharedDtor();
}

void ins_con_info_t::SharedDtor() {
  if (reserved_comment_ != &::google::protobuf::internal::kEmptyString) {
    delete reserved_comment_;
  }
  if (this != default_instance_) {
    delete read_register_;
    delete write_register_;
    delete load_memory_;
    delete store_memory_;
    delete call_;
    delete ret_ret_value_;
    delete system_call_;
    delete next_address_;
  }
}

void ins_con_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ins_con_info_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ins_con_info_t_descriptor_;
}

const ins_con_info_t& ins_con_info_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

ins_con_info_t* ins_con_info_t::default_instance_ = NULL;

ins_con_info_t* ins_con_info_t::New() const {
  return new ins_con_info_t;
}

void ins_con_info_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0;
    if (has_read_register()) {
      if (read_register_ != NULL) read_register_->::trace_format::register_t::Clear();
    }
    if (has_write_register()) {
      if (write_register_ != NULL) write_register_->::trace_format::register_t::Clear();
    }
    if (has_load_memory()) {
      if (load_memory_ != NULL) load_memory_->::trace_format::memory_t::Clear();
    }
    if (has_store_memory()) {
      if (store_memory_ != NULL) store_memory_->::trace_format::memory_t::Clear();
    }
    if (has_call()) {
      if (call_ != NULL) call_->::trace_format::call_t::Clear();
    }
    if (has_ret_ret_value()) {
      if (ret_ret_value_ != NULL) ret_ret_value_->::trace_format::address_t::Clear();
    }
    if (has_system_call()) {
      if (system_call_ != NULL) system_call_->::trace_format::syscall_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_next_address()) {
      if (next_address_ != NULL) next_address_->::trace_format::address_t::Clear();
    }
    if (has_reserved_comment()) {
      if (reserved_comment_ != &::google::protobuf::internal::kEmptyString) {
        reserved_comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ins_con_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.typeid_con_info_t typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::typeid_con_info_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::typeid_con_info_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_read_register;
        break;
      }

      // optional .trace_format.register_t read_register = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_register()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_write_register;
        break;
      }

      // optional .trace_format.register_t write_register = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_write_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_register()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_load_memory;
        break;
      }

      // optional .trace_format.memory_t load_memory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_memory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_store_memory;
        break;
      }

      // optional .trace_format.memory_t store_memory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_memory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_call;
        break;
      }

      // optional .trace_format.call_t call = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ret_ret_value;
        break;
      }

      // optional .trace_format.address_t ret_ret_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_ret_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret_ret_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_system_call;
        break;
      }

      // optional .trace_format.syscall_t system_call = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_next_address;
        break;
      }

      // optional .trace_format.address_t next_address = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_reserved_comment;
        break;
      }

      // optional bytes reserved_comment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reserved_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reserved_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ins_con_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.typeid_con_info_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  // optional .trace_format.register_t read_register = 2;
  if (has_read_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->read_register(), output);
  }

  // optional .trace_format.register_t write_register = 3;
  if (has_write_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->write_register(), output);
  }

  // optional .trace_format.memory_t load_memory = 4;
  if (has_load_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->load_memory(), output);
  }

  // optional .trace_format.memory_t store_memory = 5;
  if (has_store_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->store_memory(), output);
  }

  // optional .trace_format.call_t call = 6;
  if (has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->call(), output);
  }

  // optional .trace_format.address_t ret_ret_value = 7;
  if (has_ret_ret_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ret_ret_value(), output);
  }

  // optional .trace_format.syscall_t system_call = 8;
  if (has_system_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->system_call(), output);
  }

  // optional .trace_format.address_t next_address = 9;
  if (has_next_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->next_address(), output);
  }

  // optional bytes reserved_comment = 10;
  if (has_reserved_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->reserved_comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ins_con_info_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.typeid_con_info_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  // optional .trace_format.register_t read_register = 2;
  if (has_read_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->read_register(), target);
  }

  // optional .trace_format.register_t write_register = 3;
  if (has_write_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->write_register(), target);
  }

  // optional .trace_format.memory_t load_memory = 4;
  if (has_load_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->load_memory(), target);
  }

  // optional .trace_format.memory_t store_memory = 5;
  if (has_store_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->store_memory(), target);
  }

  // optional .trace_format.call_t call = 6;
  if (has_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->call(), target);
  }

  // optional .trace_format.address_t ret_ret_value = 7;
  if (has_ret_ret_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ret_ret_value(), target);
  }

  // optional .trace_format.syscall_t system_call = 8;
  if (has_system_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->system_call(), target);
  }

  // optional .trace_format.address_t next_address = 9;
  if (has_next_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->next_address(), target);
  }

  // optional bytes reserved_comment = 10;
  if (has_reserved_comment()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->reserved_comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ins_con_info_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.typeid_con_info_t typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
    }

    // optional .trace_format.register_t read_register = 2;
    if (has_read_register()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_register());
    }

    // optional .trace_format.register_t write_register = 3;
    if (has_write_register()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write_register());
    }

    // optional .trace_format.memory_t load_memory = 4;
    if (has_load_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_memory());
    }

    // optional .trace_format.memory_t store_memory = 5;
    if (has_store_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_memory());
    }

    // optional .trace_format.call_t call = 6;
    if (has_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call());
    }

    // optional .trace_format.address_t ret_ret_value = 7;
    if (has_ret_ret_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret_ret_value());
    }

    // optional .trace_format.syscall_t system_call = 8;
    if (has_system_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system_call());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .trace_format.address_t next_address = 9;
    if (has_next_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_address());
    }

    // optional bytes reserved_comment = 10;
    if (has_reserved_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reserved_comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ins_con_info_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ins_con_info_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ins_con_info_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ins_con_info_t::MergeFrom(const ins_con_info_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_read_register()) {
      mutable_read_register()->::trace_format::register_t::MergeFrom(from.read_register());
    }
    if (from.has_write_register()) {
      mutable_write_register()->::trace_format::register_t::MergeFrom(from.write_register());
    }
    if (from.has_load_memory()) {
      mutable_load_memory()->::trace_format::memory_t::MergeFrom(from.load_memory());
    }
    if (from.has_store_memory()) {
      mutable_store_memory()->::trace_format::memory_t::MergeFrom(from.store_memory());
    }
    if (from.has_call()) {
      mutable_call()->::trace_format::call_t::MergeFrom(from.call());
    }
    if (from.has_ret_ret_value()) {
      mutable_ret_ret_value()->::trace_format::address_t::MergeFrom(from.ret_ret_value());
    }
    if (from.has_system_call()) {
      mutable_system_call()->::trace_format::syscall_t::MergeFrom(from.system_call());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_next_address()) {
      mutable_next_address()->::trace_format::address_t::MergeFrom(from.next_address());
    }
    if (from.has_reserved_comment()) {
      set_reserved_comment(from.reserved_comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ins_con_info_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ins_con_info_t::CopyFrom(const ins_con_info_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ins_con_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_read_register()) {
    if (!this->read_register().IsInitialized()) return false;
  }
  if (has_write_register()) {
    if (!this->write_register().IsInitialized()) return false;
  }
  if (has_load_memory()) {
    if (!this->load_memory().IsInitialized()) return false;
  }
  if (has_store_memory()) {
    if (!this->store_memory().IsInitialized()) return false;
  }
  if (has_call()) {
    if (!this->call().IsInitialized()) return false;
  }
  if (has_ret_ret_value()) {
    if (!this->ret_ret_value().IsInitialized()) return false;
  }
  if (has_system_call()) {
    if (!this->system_call().IsInitialized()) return false;
  }
  if (has_next_address()) {
    if (!this->next_address().IsInitialized()) return false;
  }
  return true;
}

void ins_con_info_t::Swap(ins_con_info_t* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(read_register_, other->read_register_);
    std::swap(write_register_, other->write_register_);
    std::swap(load_memory_, other->load_memory_);
    std::swap(store_memory_, other->store_memory_);
    std::swap(call_, other->call_);
    std::swap(ret_ret_value_, other->ret_ret_value_);
    std::swap(system_call_, other->system_call_);
    std::swap(next_address_, other->next_address_);
    std::swap(reserved_comment_, other->reserved_comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ins_con_info_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ins_con_info_t_descriptor_;
  metadata.reflection = ins_con_info_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int instruction_t::kThreadIdFieldNumber;
const int instruction_t::kAddressFieldNumber;
const int instruction_t::kOpcodeFieldNumber;
const int instruction_t::kConcreteInfoFieldNumber;
#endif  // !_MSC_VER

instruction_t::instruction_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void instruction_t::InitAsDefaultInstance() {
  address_ = const_cast< ::trace_format::address_t*>(&::trace_format::address_t::default_instance());
}

instruction_t::instruction_t(const instruction_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void instruction_t::SharedCtor() {
  _cached_size_ = 0;
  thread_id_ = 0u;
  address_ = NULL;
  opcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

instruction_t::~instruction_t() {
  SharedDtor();
}

void instruction_t::SharedDtor() {
  if (opcode_ != &::google::protobuf::internal::kEmptyString) {
    delete opcode_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void instruction_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instruction_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return instruction_t_descriptor_;
}

const instruction_t& instruction_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

instruction_t* instruction_t::default_instance_ = NULL;

instruction_t* instruction_t::New() const {
  return new instruction_t;
}

void instruction_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    thread_id_ = 0u;
    if (has_address()) {
      if (address_ != NULL) address_->::trace_format::address_t::Clear();
    }
    if (has_opcode()) {
      if (opcode_ != &::google::protobuf::internal::kEmptyString) {
        opcode_->clear();
      }
    }
  }
  concrete_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool instruction_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 thread_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required .trace_format.address_t address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_opcode;
        break;
      }

      // required bytes opcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_concrete_info;
        break;
      }

      // repeated .trace_format.ins_con_info_t concrete_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_concrete_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_concrete_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_concrete_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void instruction_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 thread_id = 1;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thread_id(), output);
  }

  // required .trace_format.address_t address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->address(), output);
  }

  // required bytes opcode = 3;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->opcode(), output);
  }

  // repeated .trace_format.ins_con_info_t concrete_info = 4;
  for (int i = 0; i < this->concrete_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->concrete_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* instruction_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 thread_id = 1;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thread_id(), target);
  }

  // required .trace_format.address_t address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->address(), target);
  }

  // required bytes opcode = 3;
  if (has_opcode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->opcode(), target);
  }

  // repeated .trace_format.ins_con_info_t concrete_info = 4;
  for (int i = 0; i < this->concrete_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->concrete_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int instruction_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 thread_id = 1;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // required .trace_format.address_t address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // required bytes opcode = 3;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opcode());
    }

  }
  // repeated .trace_format.ins_con_info_t concrete_info = 4;
  total_size += 1 * this->concrete_info_size();
  for (int i = 0; i < this->concrete_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->concrete_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instruction_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const instruction_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const instruction_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void instruction_t::MergeFrom(const instruction_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  concrete_info_.MergeFrom(from.concrete_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_address()) {
      mutable_address()->::trace_format::address_t::MergeFrom(from.address());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void instruction_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instruction_t::CopyFrom(const instruction_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instruction_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  for (int i = 0; i < concrete_info_size(); i++) {
    if (!this->concrete_info(i).IsInitialized()) return false;
  }
  return true;
}

void instruction_t::Swap(instruction_t* other) {
  if (other != this) {
    std::swap(thread_id_, other->thread_id_);
    std::swap(address_, other->address_);
    std::swap(opcode_, other->opcode_);
    concrete_info_.Swap(&other->concrete_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata instruction_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = instruction_t_descriptor_;
  metadata.reflection = instruction_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int body_t::kTypeidFieldNumber;
const int body_t::kMetadataFieldNumber;
const int body_t::kInstructionFieldNumber;
#endif  // !_MSC_VER

body_t::body_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void body_t::InitAsDefaultInstance() {
  metadata_ = const_cast< ::trace_format::metadata_t*>(&::trace_format::metadata_t::default_instance());
  instruction_ = const_cast< ::trace_format::instruction_t*>(&::trace_format::instruction_t::default_instance());
}

body_t::body_t(const body_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void body_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  metadata_ = NULL;
  instruction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

body_t::~body_t() {
  SharedDtor();
}

void body_t::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
    delete instruction_;
  }
}

void body_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* body_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return body_t_descriptor_;
}

const body_t& body_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

body_t* body_t::default_instance_ = NULL;

body_t* body_t::New() const {
  return new body_t;
}

void body_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0;
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::trace_format::metadata_t::Clear();
    }
    if (has_instruction()) {
      if (instruction_ != NULL) instruction_->::trace_format::instruction_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool body_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.typeid_body_t typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::typeid_body_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::typeid_body_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }

      // optional .trace_format.metadata_t metadata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_instruction;
        break;
      }

      // optional .trace_format.instruction_t instruction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instruction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void body_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.typeid_body_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  // optional .trace_format.metadata_t metadata = 2;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metadata(), output);
  }

  // optional .trace_format.instruction_t instruction = 3;
  if (has_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->instruction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* body_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.typeid_body_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  // optional .trace_format.metadata_t metadata = 2;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->metadata(), target);
  }

  // optional .trace_format.instruction_t instruction = 3;
  if (has_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->instruction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int body_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.typeid_body_t typeid = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
    }

    // optional .trace_format.metadata_t metadata = 2;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }

    // optional .trace_format.instruction_t instruction = 3;
    if (has_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instruction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void body_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const body_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const body_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void body_t::MergeFrom(const body_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::trace_format::metadata_t::MergeFrom(from.metadata());
    }
    if (from.has_instruction()) {
      mutable_instruction()->::trace_format::instruction_t::MergeFrom(from.instruction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void body_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void body_t::CopyFrom(const body_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool body_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  if (has_instruction()) {
    if (!this->instruction().IsInitialized()) return false;
  }
  return true;
}

void body_t::Swap(body_t* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(metadata_, other->metadata_);
    std::swap(instruction_, other->instruction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata body_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = body_t_descriptor_;
  metadata.reflection = body_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chunk_t::kBodyFieldNumber;
#endif  // !_MSC_VER

chunk_t::chunk_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chunk_t::InitAsDefaultInstance() {
}

chunk_t::chunk_t(const chunk_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chunk_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chunk_t::~chunk_t() {
  SharedDtor();
}

void chunk_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chunk_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chunk_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chunk_t_descriptor_;
}

const chunk_t& chunk_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

chunk_t* chunk_t::default_instance_ = NULL;

chunk_t* chunk_t::New() const {
  return new chunk_t;
}

void chunk_t::Clear() {
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chunk_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .trace_format.body_t body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_body;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chunk_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .trace_format.body_t body = 1;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->body(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chunk_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .trace_format.body_t body = 1;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->body(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chunk_t::ByteSize() const {
  int total_size = 0;

  // repeated .trace_format.body_t body = 1;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chunk_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chunk_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chunk_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chunk_t::MergeFrom(const chunk_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_.MergeFrom(from.body_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chunk_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chunk_t::CopyFrom(const chunk_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chunk_t::IsInitialized() const {

  for (int i = 0; i < body_size(); i++) {
    if (!this->body(i).IsInitialized()) return false;
  }
  return true;
}

void chunk_t::Swap(chunk_t* other) {
  if (other != this) {
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chunk_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chunk_t_descriptor_;
  metadata.reflection = chunk_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trace_t::kHeaderFieldNumber;
const int trace_t::kBodyFieldNumber;
#endif  // !_MSC_VER

trace_t::trace_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void trace_t::InitAsDefaultInstance() {
  header_ = const_cast< ::trace_format::header_t*>(&::trace_format::header_t::default_instance());
}

trace_t::trace_t(const trace_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void trace_t::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trace_t::~trace_t() {
  SharedDtor();
}

void trace_t::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void trace_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trace_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trace_t_descriptor_;
}

const trace_t& trace_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trace_2eproto();
  return *default_instance_;
}

trace_t* trace_t::default_instance_ = NULL;

trace_t* trace_t::New() const {
  return new trace_t;
}

void trace_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::trace_format::header_t::Clear();
    }
  }
  body_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trace_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.header_t header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // repeated .trace_format.body_t body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void trace_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trace_format.header_t header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .trace_format.body_t body = 2;
  for (int i = 0; i < this->body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* trace_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .trace_format.header_t header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .trace_format.body_t body = 2;
  for (int i = 0; i < this->body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int trace_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trace_format.header_t header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .trace_format.body_t body = 2;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trace_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trace_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trace_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trace_t::MergeFrom(const trace_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  body_.MergeFrom(from.body_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::trace_format::header_t::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trace_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trace_t::CopyFrom(const trace_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trace_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < body_size(); i++) {
    if (!this->body(i).IsInitialized()) return false;
  }
  return true;
}

void trace_t::Swap(trace_t* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    body_.Swap(&other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trace_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trace_t_descriptor_;
  metadata.reflection = trace_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace trace_format

// @@protoc_insertion_point(global_scope)
